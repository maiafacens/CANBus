
CAN_UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003828  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003934  08003934  00013934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003a58  08003a58  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a58  08003a58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003ad0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003ad0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000916e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a01  00000000  00000000  00029207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017467  00000000  00000000  0002bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008841  00000000  00000000  00042fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008514d  00000000  00000000  0004b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0945  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002378  00000000  00000000  000d0998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800391c 	.word	0x0800391c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800391c 	.word	0x0800391c

0800014c <HAL_CAN_RxFifo1MsgPendingCallback>:
int flag = 0;

long int tick;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000154:	4b0e      	ldr	r3, [pc, #56]	; (8000190 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 8000156:	4a0f      	ldr	r2, [pc, #60]	; (8000194 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8000158:	2101      	movs	r1, #1
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 ff48 	bl	8000ff0 <HAL_CAN_GetRxMessage>


	if (RxHeader.StdId == 0x025)
 8000160:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	2b25      	cmp	r3, #37	; 0x25
 8000166:	d10e      	bne.n	8000186 <HAL_CAN_RxFifo1MsgPendingCallback+0x3a>
	{
		PcData[0]= 0;
 8000168:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
		PcData[1]= 0;
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8000170:	2200      	movs	r2, #0
 8000172:	705a      	strb	r2, [r3, #1]
		PcData[2]= 2;
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 8000176:	2202      	movs	r2, #2
 8000178:	709a      	strb	r2, [r3, #2]
		PcData[3]= 5;
 800017a:	4b07      	ldr	r3, [pc, #28]	; (8000198 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>)
 800017c:	2205      	movs	r2, #5
 800017e:	70da      	strb	r2, [r3, #3]

		datacheck = 1;
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <HAL_CAN_RxFifo1MsgPendingCallback+0x50>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
	}
}
 8000186:	bf00      	nop
 8000188:	3708      	adds	r7, #8
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	200000e0 	.word	0x200000e0
 8000194:	2000014c 	.word	0x2000014c
 8000198:	200000d4 	.word	0x200000d4
 800019c:	2000008c 	.word	0x2000008c

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001a2:	b0af      	sub	sp, #188	; 0xbc
 80001a4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 fbdf 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f953 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 fa13 	bl	80005d8 <MX_GPIO_Init>
  MX_CAN_Init();
 80001b2:	f000 f995 	bl	80004e0 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80001b6:	f000 f9e5 	bl	8000584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80001ba:	4893      	ldr	r0, [pc, #588]	; (8000408 <main+0x268>)
 80001bc:	f000 fdfa 	bl	8000db4 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80001c0:	2110      	movs	r1, #16
 80001c2:	4891      	ldr	r0, [pc, #580]	; (8000408 <main+0x268>)
 80001c4:	f001 f825 	bl	8001212 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 8;  // data length
 80001c8:	4b90      	ldr	r3, [pc, #576]	; (800040c <main+0x26c>)
 80001ca:	2208      	movs	r2, #8
 80001cc:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80001ce:	4b8f      	ldr	r3, [pc, #572]	; (800040c <main+0x26c>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80001d4:	4b8d      	ldr	r3, [pc, #564]	; (800040c <main+0x26c>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x005;  // ID standard
 80001da:	4b8c      	ldr	r3, [pc, #560]	; (800040c <main+0x26c>)
 80001dc:	2205      	movs	r2, #5
 80001de:	601a      	str	r2, [r3, #0]

  tick = HAL_GetTick();
 80001e0:	f000 fc1a 	bl	8000a18 <HAL_GetTick>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b89      	ldr	r3, [pc, #548]	; (8000410 <main+0x270>)
 80001ea:	601a      	str	r2, [r3, #0]

  for (int i=0; i<8; i++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80001f2:	e010      	b.n	8000216 <main+0x76>
  {
	  RxBuff[i] = 0x00;
 80001f4:	4a87      	ldr	r2, [pc, #540]	; (8000414 <main+0x274>)
 80001f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80001fa:	4413      	add	r3, r2
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
	  TxBuff[i] = 0x00;
 8000200:	4a85      	ldr	r2, [pc, #532]	; (8000418 <main+0x278>)
 8000202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000206:	4413      	add	r3, r2
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<8; i++)
 800020c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000210:	3301      	adds	r3, #1
 8000212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000216:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800021a:	2b07      	cmp	r3, #7
 800021c:	ddea      	ble.n	80001f4 <main+0x54>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Receive_IT(&huart2, RxBuff, 8);
 800021e:	2208      	movs	r2, #8
 8000220:	497c      	ldr	r1, [pc, #496]	; (8000414 <main+0x274>)
 8000222:	487e      	ldr	r0, [pc, #504]	; (800041c <main+0x27c>)
 8000224:	f002 faab 	bl	800277e <HAL_UART_Receive_IT>

	  for (int i=0; i<8; i++)
 8000228:	2300      	movs	r3, #0
 800022a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800022e:	e00f      	b.n	8000250 <main+0xb0>
	  {
			TxData[i] = RxBuff[i];
 8000230:	4a78      	ldr	r2, [pc, #480]	; (8000414 <main+0x274>)
 8000232:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000236:	4413      	add	r3, r2
 8000238:	7819      	ldrb	r1, [r3, #0]
 800023a:	4a79      	ldr	r2, [pc, #484]	; (8000420 <main+0x280>)
 800023c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000240:	4413      	add	r3, r2
 8000242:	460a      	mov	r2, r1
 8000244:	701a      	strb	r2, [r3, #0]
	  for (int i=0; i<8; i++)
 8000246:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800024a:	3301      	adds	r3, #1
 800024c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000254:	2b07      	cmp	r3, #7
 8000256:	ddeb      	ble.n	8000230 <main+0x90>
	  }

	  if (HAL_GetTick() - tick > 1000)
 8000258:	f000 fbde 	bl	8000a18 <HAL_GetTick>
 800025c:	4603      	mov	r3, r0
 800025e:	4a6c      	ldr	r2, [pc, #432]	; (8000410 <main+0x270>)
 8000260:	6812      	ldr	r2, [r2, #0]
 8000262:	1a9b      	subs	r3, r3, r2
 8000264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000268:	d910      	bls.n	800028c <main+0xec>
	  {

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800026a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026e:	486d      	ldr	r0, [pc, #436]	; (8000424 <main+0x284>)
 8000270:	f001 fd72 	bl	8001d58 <HAL_GPIO_TogglePin>


		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000274:	4b6c      	ldr	r3, [pc, #432]	; (8000428 <main+0x288>)
 8000276:	4a6a      	ldr	r2, [pc, #424]	; (8000420 <main+0x280>)
 8000278:	4964      	ldr	r1, [pc, #400]	; (800040c <main+0x26c>)
 800027a:	4863      	ldr	r0, [pc, #396]	; (8000408 <main+0x268>)
 800027c:	f000 fdde 	bl	8000e3c <HAL_CAN_AddTxMessage>

		  tick = HAL_GetTick();
 8000280:	f000 fbca 	bl	8000a18 <HAL_GetTick>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	4b61      	ldr	r3, [pc, #388]	; (8000410 <main+0x270>)
 800028a:	601a      	str	r2, [r3, #0]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (datacheck)
 800028c:	4b67      	ldr	r3, [pc, #412]	; (800042c <main+0x28c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0c4      	beq.n	800021e <main+0x7e>
	  {

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000298:	4865      	ldr	r0, [pc, #404]	; (8000430 <main+0x290>)
 800029a:	f001 fd5d 	bl	8001d58 <HAL_GPIO_TogglePin>

		  char msg[90] = {0x00};
 800029e:	2300      	movs	r3, #0
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80002a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002a6:	2256      	movs	r2, #86	; 0x56
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fef4 	bl	8003098 <memset>
		  char ID[40] = {0x00};
 80002b0:	2300      	movs	r3, #0
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2224      	movs	r2, #36	; 0x24
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 feec 	bl	8003098 <memset>
		  char cor[20] = {0x00};
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80002c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

		  sprintf(ID,"\n\r\n\r ID: %xx%x%x%x \n\r",PcData[0],PcData[1],PcData[2],PcData[3]);
 80002d4:	4b57      	ldr	r3, [pc, #348]	; (8000434 <main+0x294>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	4b56      	ldr	r3, [pc, #344]	; (8000434 <main+0x294>)
 80002dc:	785b      	ldrb	r3, [r3, #1]
 80002de:	461c      	mov	r4, r3
 80002e0:	4b54      	ldr	r3, [pc, #336]	; (8000434 <main+0x294>)
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b53      	ldr	r3, [pc, #332]	; (8000434 <main+0x294>)
 80002e8:	78db      	ldrb	r3, [r3, #3]
 80002ea:	4638      	mov	r0, r7
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	9200      	str	r2, [sp, #0]
 80002f0:	4623      	mov	r3, r4
 80002f2:	460a      	mov	r2, r1
 80002f4:	4950      	ldr	r1, [pc, #320]	; (8000438 <main+0x298>)
 80002f6:	f002 fed7 	bl	80030a8 <siprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t*) ID, sizeof(ID), 1000);
 80002fa:	4639      	mov	r1, r7
 80002fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000300:	2228      	movs	r2, #40	; 0x28
 8000302:	4846      	ldr	r0, [pc, #280]	; (800041c <main+0x27c>)
 8000304:	f002 f9a9 	bl	800265a <HAL_UART_Transmit>

		  switch(RxData[5])
 8000308:	4b4c      	ldr	r3, [pc, #304]	; (800043c <main+0x29c>)
 800030a:	795b      	ldrb	r3, [r3, #5]
 800030c:	2bd4      	cmp	r3, #212	; 0xd4
 800030e:	d037      	beq.n	8000380 <main+0x1e0>
 8000310:	2bd4      	cmp	r3, #212	; 0xd4
 8000312:	dc44      	bgt.n	800039e <main+0x1fe>
 8000314:	2bc3      	cmp	r3, #195	; 0xc3
 8000316:	d024      	beq.n	8000362 <main+0x1c2>
 8000318:	2bc3      	cmp	r3, #195	; 0xc3
 800031a:	dc40      	bgt.n	800039e <main+0x1fe>
 800031c:	2ba1      	cmp	r3, #161	; 0xa1
 800031e:	d002      	beq.n	8000326 <main+0x186>
 8000320:	2bb2      	cmp	r3, #178	; 0xb2
 8000322:	d00f      	beq.n	8000344 <main+0x1a4>
 8000324:	e03b      	b.n	800039e <main+0x1fe>
		  {
			  case 0xA1: sprintf(cor,"\n\r\n\r LED AZUL \n\r");
 8000326:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800032a:	4945      	ldr	r1, [pc, #276]	; (8000440 <main+0x2a0>)
 800032c:	4618      	mov	r0, r3
 800032e:	f002 febb 	bl	80030a8 <siprintf>
			  	  HAL_UART_Transmit(&huart2, (uint8_t*) cor, sizeof(cor), 1000);                                               // Zera caractere recebido
 8000332:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033a:	2214      	movs	r2, #20
 800033c:	4837      	ldr	r0, [pc, #220]	; (800041c <main+0x27c>)
 800033e:	f002 f98c 	bl	800265a <HAL_UART_Transmit>
				  break;
 8000342:	e02c      	b.n	800039e <main+0x1fe>
			  case 0xB2: sprintf(cor,"\n\r\n\r LED VERDE \n\r");
 8000344:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000348:	493e      	ldr	r1, [pc, #248]	; (8000444 <main+0x2a4>)
 800034a:	4618      	mov	r0, r3
 800034c:	f002 feac 	bl	80030a8 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*) cor, sizeof(cor), 1000);                                               // Zera caractere recebido
 8000350:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000358:	2214      	movs	r2, #20
 800035a:	4830      	ldr	r0, [pc, #192]	; (800041c <main+0x27c>)
 800035c:	f002 f97d 	bl	800265a <HAL_UART_Transmit>
				  break;
 8000360:	e01d      	b.n	800039e <main+0x1fe>
			  case 0xC3: sprintf(cor,"\n\r\n\r LED AMARELO \n\r");
 8000362:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000366:	4938      	ldr	r1, [pc, #224]	; (8000448 <main+0x2a8>)
 8000368:	4618      	mov	r0, r3
 800036a:	f002 fe9d 	bl	80030a8 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*) cor, sizeof(cor), 1000);                                               // Zera caractere recebido
 800036e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000376:	2214      	movs	r2, #20
 8000378:	4828      	ldr	r0, [pc, #160]	; (800041c <main+0x27c>)
 800037a:	f002 f96e 	bl	800265a <HAL_UART_Transmit>
				  break;
 800037e:	e00e      	b.n	800039e <main+0x1fe>
			  case 0xD4: sprintf(cor,"\n\r\n\r LED VERMELHO \n\r");
 8000380:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000384:	4931      	ldr	r1, [pc, #196]	; (800044c <main+0x2ac>)
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fe8e 	bl	80030a8 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t*) cor, sizeof(cor), 1000);                                               // Zera caractere recebido
 800038c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000390:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000394:	2214      	movs	r2, #20
 8000396:	4821      	ldr	r0, [pc, #132]	; (800041c <main+0x27c>)
 8000398:	f002 f95f 	bl	800265a <HAL_UART_Transmit>
				  break;
 800039c:	bf00      	nop
		  }

		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 800039e:	4b27      	ldr	r3, [pc, #156]	; (800043c <main+0x29c>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003a2:	469c      	mov	ip, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003a4:	4b25      	ldr	r3, [pc, #148]	; (800043c <main+0x29c>)
 80003a6:	785b      	ldrb	r3, [r3, #1]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003a8:	469e      	mov	lr, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <main+0x29c>)
 80003ac:	789b      	ldrb	r3, [r3, #2]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003ae:	461a      	mov	r2, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003b0:	4b22      	ldr	r3, [pc, #136]	; (800043c <main+0x29c>)
 80003b2:	78db      	ldrb	r3, [r3, #3]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003b4:	4619      	mov	r1, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <main+0x29c>)
 80003b8:	791b      	ldrb	r3, [r3, #4]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003ba:	461c      	mov	r4, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <main+0x29c>)
 80003be:	795b      	ldrb	r3, [r3, #5]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003c0:	461d      	mov	r5, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003c2:	4b1e      	ldr	r3, [pc, #120]	; (800043c <main+0x29c>)
 80003c4:	799b      	ldrb	r3, [r3, #6]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003c6:	461e      	mov	r6, r3
		  RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <main+0x29c>)
 80003ca:	79db      	ldrb	r3, [r3, #7]
		  sprintf(msg,"\n\r D1 : %X \n\r D2 : %X \n\r D3 : %X \n\r D4 : %X \n\r D5 : %X \n\r D6 : %X \n\r D7 : %X \n\r D8 : %X \n\r",
 80003cc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80003d0:	9305      	str	r3, [sp, #20]
 80003d2:	9604      	str	r6, [sp, #16]
 80003d4:	9503      	str	r5, [sp, #12]
 80003d6:	9402      	str	r4, [sp, #8]
 80003d8:	9101      	str	r1, [sp, #4]
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	4673      	mov	r3, lr
 80003de:	4662      	mov	r2, ip
 80003e0:	491b      	ldr	r1, [pc, #108]	; (8000450 <main+0x2b0>)
 80003e2:	f002 fe61 	bl	80030a8 <siprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, sizeof(msg), 1000);
 80003e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80003ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ee:	225a      	movs	r2, #90	; 0x5a
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <main+0x27c>)
 80003f2:	f002 f932 	bl	800265a <HAL_UART_Transmit>

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	480a      	ldr	r0, [pc, #40]	; (8000424 <main+0x284>)
 80003fc:	f001 fcac 	bl	8001d58 <HAL_GPIO_TogglePin>

		  datacheck = 0;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <main+0x28c>)
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, RxBuff, 8);
 8000406:	e70a      	b.n	800021e <main+0x7e>
 8000408:	2000009c 	.word	0x2000009c
 800040c:	2000012c 	.word	0x2000012c
 8000410:	200000c4 	.word	0x200000c4
 8000414:	200000d8 	.word	0x200000d8
 8000418:	20000144 	.word	0x20000144
 800041c:	200000e8 	.word	0x200000e8
 8000420:	200000c8 	.word	0x200000c8
 8000424:	40011000 	.word	0x40011000
 8000428:	200000d0 	.word	0x200000d0
 800042c:	2000008c 	.word	0x2000008c
 8000430:	40010c00 	.word	0x40010c00
 8000434:	200000d4 	.word	0x200000d4
 8000438:	08003934 	.word	0x08003934
 800043c:	200000e0 	.word	0x200000e0
 8000440:	0800394c 	.word	0x0800394c
 8000444:	08003960 	.word	0x08003960
 8000448:	08003974 	.word	0x08003974
 800044c:	08003988 	.word	0x08003988
 8000450:	080039a0 	.word	0x080039a0

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	; 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	; 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fe18 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fc75 	bl	8001d8c <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f8e2 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fee0 	bl	800228c <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f8cd 	bl	8000670 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_CAN_Init+0x9c>)
 80004e8:	4a25      	ldr	r2, [pc, #148]	; (8000580 <MX_CAN_Init+0xa0>)
 80004ea:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80004ec:	4b23      	ldr	r3, [pc, #140]	; (800057c <MX_CAN_Init+0x9c>)
 80004ee:	2212      	movs	r2, #18
 80004f0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_CAN_Init+0x9c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <MX_CAN_Init+0x9c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_CAN_Init+0x9c>)
 8000500:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000504:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000506:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_CAN_Init+0x9c>)
 8000508:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800050c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_CAN_Init+0x9c>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_CAN_Init+0x9c>)
 8000516:	2200      	movs	r2, #0
 8000518:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_CAN_Init+0x9c>)
 800051c:	2200      	movs	r2, #0
 800051e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_CAN_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_CAN_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_CAN_Init+0x9c>)
 800052e:	2200      	movs	r2, #0
 8000530:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_CAN_Init+0x9c>)
 8000534:	f000 fa7a 	bl	8000a2c <HAL_CAN_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800053e:	f000 f897 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000542:	2301      	movs	r3, #1
 8000544:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 7;  // which filter bank to use from the assigned ones
 8000546:	2307      	movs	r3, #7
 8000548:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800054a:	2301      	movs	r3, #1
 800054c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000562:	2301      	movs	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000566:	2300      	movs	r3, #0
 8000568:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800056a:	463b      	mov	r3, r7
 800056c:	4619      	mov	r1, r3
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <MX_CAN_Init+0x9c>)
 8000570:	f000 fb57 	bl	8000c22 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000009c 	.word	0x2000009c
 8000580:	40006400 	.word	0x40006400

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_USART2_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_USART2_UART_Init+0x4c>)
 80005bc:	f002 f800 	bl	80025c0 <HAL_UART_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005c6:	f000 f853 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000e8 	.word	0x200000e8
 80005d4:	40004400 	.word	0x40004400

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_GPIO_Init+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <MX_GPIO_Init+0x90>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_GPIO_Init+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0310 	and.w	r3, r3, #16
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_GPIO_Init+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <MX_GPIO_Init+0x90>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_GPIO_Init+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_GPIO_Init+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a11      	ldr	r2, [pc, #68]	; (8000668 <MX_GPIO_Init+0x90>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_GPIO_Init+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063a:	480c      	ldr	r0, [pc, #48]	; (800066c <MX_GPIO_Init+0x94>)
 800063c:	f001 fb74 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2302      	movs	r3, #2
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4619      	mov	r1, r3
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0x94>)
 800065a:	f001 f9e1 	bl	8001a20 <HAL_GPIO_Init>

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	40011000 	.word	0x40011000

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_MspInit+0x5c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_MspInit+0x60>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_MspInit+0x60>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a20      	ldr	r2, [pc, #128]	; (800077c <HAL_CAN_MspInit+0x9c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d139      	bne.n	8000774 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070a:	61d3      	str	r3, [r2, #28]
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <HAL_CAN_MspInit+0xa0>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000730:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <HAL_CAN_MspInit+0xa4>)
 8000746:	f001 f96b 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000754:	2303      	movs	r3, #3
 8000756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_CAN_MspInit+0xa4>)
 8000760:	f001 f95e 	bl	8001a20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2015      	movs	r0, #21
 800076a:	f001 f872 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800076e:	2015      	movs	r0, #21
 8000770:	f001 f88b 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40006400 	.word	0x40006400
 8000780:	40021000 	.word	0x40021000
 8000784:	40010800 	.word	0x40010800

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <HAL_UART_MspInit+0x98>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d137      	bne.n	8000818 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_UART_MspInit+0x9c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d8:	2304      	movs	r3, #4
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	480f      	ldr	r0, [pc, #60]	; (8000828 <HAL_UART_MspInit+0xa0>)
 80007ec:	f001 f918 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f0:	2308      	movs	r3, #8
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <HAL_UART_MspInit+0xa0>)
 8000804:	f001 f90c 	bl	8001a20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2026      	movs	r0, #38	; 0x26
 800080e:	f001 f820 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000812:	2026      	movs	r0, #38	; 0x26
 8000814:	f001 f839 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40004400 	.word	0x40004400
 8000824:	40021000 	.word	0x40021000
 8000828:	40010800 	.word	0x40010800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 f8bf 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <CAN1_RX1_IRQHandler+0x10>)
 8000882:	f000 fceb 	bl	800125c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000009c 	.word	0x2000009c

08000890 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <USART2_IRQHandler+0x10>)
 8000896:	f001 ffa3 	bl	80027e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000e8 	.word	0x200000e8

080008a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ac:	4a14      	ldr	r2, [pc, #80]	; (8000900 <_sbrk+0x5c>)
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <_sbrk+0x60>)
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <_sbrk+0x64>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <_sbrk+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d207      	bcs.n	80008e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d4:	f002 fbb6 	bl	8003044 <__errno>
 80008d8:	4603      	mov	r3, r0
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	e009      	b.n	80008f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <_sbrk+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20005000 	.word	0x20005000
 8000904:	00000400 	.word	0x00000400
 8000908:	20000090 	.word	0x20000090
 800090c:	20000180 	.word	0x20000180

08000910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000942:	f7ff ffe5 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f002 fb83 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094a:	f7ff fc29 	bl	80001a0 <main>
  bx lr
 800094e:	4770      	bx	lr
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000958:	08003a60 	.word	0x08003a60
  ldr r2, =_sbss
 800095c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000960:	2000017c 	.word	0x2000017c

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 ff5f 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe7a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 ff77 	bl	80018a6 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 ff3f 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a03      	ldr	r2, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000168 	.word	0x20000168

08000a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000168 	.word	0x20000168

08000a2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e0ed      	b.n	8000c1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe48 	bl	80006e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0201 	orr.w	r2, r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a60:	f7ff ffda 	bl	8000a18 <HAL_GetTick>
 8000a64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a66:	e012      	b.n	8000a8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a68:	f7ff ffd6 	bl	8000a18 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b0a      	cmp	r3, #10
 8000a74:	d90b      	bls.n	8000a8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2205      	movs	r2, #5
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e0c5      	b.n	8000c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0e5      	beq.n	8000a68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0202 	bic.w	r2, r2, #2
 8000aaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aac:	f7ff ffb4 	bl	8000a18 <HAL_GetTick>
 8000ab0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ab2:	e012      	b.n	8000ada <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab4:	f7ff ffb0 	bl	8000a18 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b0a      	cmp	r3, #10
 8000ac0:	d90b      	bls.n	8000ada <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e09f      	b.n	8000c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1e5      	bne.n	8000ab4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7e1b      	ldrb	r3, [r3, #24]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	e007      	b.n	8000b12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7e5b      	ldrb	r3, [r3, #25]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d108      	bne.n	8000b2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e007      	b.n	8000b3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7e9b      	ldrb	r3, [r3, #26]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f042 0220 	orr.w	r2, r2, #32
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e007      	b.n	8000b66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0220 	bic.w	r2, r2, #32
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7edb      	ldrb	r3, [r3, #27]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d108      	bne.n	8000b80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0210 	bic.w	r2, r2, #16
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0210 	orr.w	r2, r2, #16
 8000b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7f1b      	ldrb	r3, [r3, #28]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0208 	orr.w	r2, r2, #8
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0208 	bic.w	r2, r2, #8
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7f5b      	ldrb	r3, [r3, #29]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d108      	bne.n	8000bd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f042 0204 	orr.w	r2, r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e007      	b.n	8000be4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0204 	bic.w	r2, r2, #4
 8000be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	ea42 0103 	orr.w	r1, r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2201      	movs	r2, #1
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d003      	beq.n	8000c48 <HAL_CAN_ConfigFilter+0x26>
 8000c40:	7cfb      	ldrb	r3, [r7, #19]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	f040 80aa 	bne.w	8000d9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c4e:	f043 0201 	orr.w	r2, r3, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	2201      	movs	r2, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d123      	bne.n	8000cca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3248      	adds	r2, #72	; 0x48
 8000caa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc0:	6979      	ldr	r1, [r7, #20]
 8000cc2:	3348      	adds	r3, #72	; 0x48
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d122      	bne.n	8000d18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cf2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3248      	adds	r2, #72	; 0x48
 8000cf8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0e:	6979      	ldr	r1, [r7, #20]
 8000d10:	3348      	adds	r3, #72	; 0x48
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000d32:	e007      	b.n	8000d44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d109      	bne.n	8000d60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000d5e:	e007      	b.n	8000d70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d107      	bne.n	8000d88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000d8e:	f023 0201 	bic.w	r2, r3, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e006      	b.n	8000daa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
  }
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	371c      	adds	r7, #28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d12e      	bne.n	8000e26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000de0:	f7ff fe1a 	bl	8000a18 <HAL_GetTick>
 8000de4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000de6:	e012      	b.n	8000e0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de8:	f7ff fe16 	bl	8000a18 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d90b      	bls.n	8000e0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2205      	movs	r2, #5
 8000e06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e012      	b.n	8000e34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e5      	bne.n	8000de8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e006      	b.n	8000e34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
  }
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5a:	7ffb      	ldrb	r3, [r7, #31]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d003      	beq.n	8000e68 <HAL_CAN_AddTxMessage+0x2c>
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	f040 80b8 	bne.w	8000fd8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10a      	bne.n	8000e88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a0 	beq.w	8000fc8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	0e1b      	lsrs	r3, r3, #24
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d907      	bls.n	8000ea8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e09e      	b.n	8000fe6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	409a      	lsls	r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	6809      	ldr	r1, [r1, #0]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3318      	adds	r3, #24
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	440b      	add	r3, r1
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e00f      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ee0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ee6:	68f9      	ldr	r1, [r7, #12]
 8000ee8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000eea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3318      	adds	r3, #24
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	440b      	add	r3, r1
 8000ef4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6819      	ldr	r1, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3318      	adds	r3, #24
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	3304      	adds	r3, #4
 8000f08:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	7d1b      	ldrb	r3, [r3, #20]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d111      	bne.n	8000f36 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3304      	adds	r3, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	6811      	ldr	r1, [r2, #0]
 8000f26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	440b      	add	r3, r1
 8000f32:	3304      	adds	r3, #4
 8000f34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3307      	adds	r3, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	061a      	lsls	r2, r3, #24
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3306      	adds	r3, #6
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3305      	adds	r3, #5
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4313      	orrs	r3, r2
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	3204      	adds	r2, #4
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	4610      	mov	r0, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	ea43 0200 	orr.w	r2, r3, r0
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3303      	adds	r3, #3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	061a      	lsls	r2, r3, #24
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	041b      	lsls	r3, r3, #16
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	4610      	mov	r0, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	6811      	ldr	r1, [r2, #0]
 8000f94:	ea43 0200 	orr.w	r2, r3, r0
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000fa2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3318      	adds	r3, #24
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4413      	add	r3, r2
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3318      	adds	r3, #24
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	440b      	add	r3, r1
 8000fc2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e00e      	b.n	8000fe6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e006      	b.n	8000fe6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001004:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d003      	beq.n	8001014 <HAL_CAN_GetRxMessage+0x24>
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b02      	cmp	r3, #2
 8001010:	f040 80f3 	bne.w	80011fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10e      	bne.n	8001038 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d116      	bne.n	8001056 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0e7      	b.n	8001208 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d107      	bne.n	8001056 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e0d8      	b.n	8001208 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	331b      	adds	r3, #27
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	4413      	add	r3, r2
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0204 	and.w	r2, r3, #4
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d10c      	bne.n	800108e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	331b      	adds	r3, #27
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	0d5b      	lsrs	r3, r3, #21
 8001084:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e00b      	b.n	80010a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	331b      	adds	r3, #27
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	331b      	adds	r3, #27
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0202 	and.w	r2, r3, #2
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	331b      	adds	r3, #27
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	3304      	adds	r3, #4
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 020f 	and.w	r2, r3, #15
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	331b      	adds	r3, #27
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	4413      	add	r3, r2
 80010e0:	3304      	adds	r3, #4
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	331b      	adds	r3, #27
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0c1b      	lsrs	r3, r3, #16
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	4413      	add	r3, r2
 800110e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0a1a      	lsrs	r2, r3, #8
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0c1a      	lsrs	r2, r3, #16
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3302      	adds	r3, #2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	0e1a      	lsrs	r2, r3, #24
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3303      	adds	r3, #3
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0a1a      	lsrs	r2, r3, #8
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3305      	adds	r3, #5
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0c1a      	lsrs	r2, r3, #16
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3306      	adds	r3, #6
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0e1a      	lsrs	r2, r3, #24
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	3307      	adds	r3, #7
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e006      	b.n	8001208 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001212:	b480      	push	{r7}
 8001214:	b085      	sub	sp, #20
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d002      	beq.n	8001230 <HAL_CAN_ActivateNotification+0x1e>
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d109      	bne.n	8001244 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6959      	ldr	r1, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	e006      	b.n	8001252 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d07c      	beq.n	800139c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d023      	beq.n	80012f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f983 	bl	80015ca <HAL_CAN_TxMailbox0CompleteCallback>
 80012c4:	e016      	b.n	80012f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d004      	beq.n	80012da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
 80012d8:	e00c      	b.n	80012f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
 80012ec:	e002      	b.n	80012f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f986 	bl	8001600 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d024      	beq.n	8001348 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f962 	bl	80015dc <HAL_CAN_TxMailbox1CompleteCallback>
 8001318:	e016      	b.n	8001348 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	e00c      	b.n	8001348 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	e002      	b.n	8001348 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f965 	bl	8001612 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d024      	beq.n	800139c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800135a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f941 	bl	80015ee <HAL_CAN_TxMailbox2CompleteCallback>
 800136c:	e016      	b.n	800139c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
 8001380:	e00c      	b.n	800139c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	e002      	b.n	800139c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f944 	bl	8001624 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2210      	movs	r2, #16
 80013be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2208      	movs	r2, #8
 80013da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f933 	bl	8001648 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f91b 	bl	8001636 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2208      	movs	r2, #8
 800143e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f90a 	bl	800165a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7fe fe74 	bl	800014c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2210      	movs	r2, #16
 800147e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f8f3 	bl	800166c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2208      	movs	r2, #8
 80014a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f8eb 	bl	800167e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d07b      	beq.n	80015aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d072      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001516:	2b00      	cmp	r3, #0
 8001518:	d043      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03e      	beq.n	80015a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800152a:	2b60      	cmp	r3, #96	; 0x60
 800152c:	d02b      	beq.n	8001586 <HAL_CAN_IRQHandler+0x32a>
 800152e:	2b60      	cmp	r3, #96	; 0x60
 8001530:	d82e      	bhi.n	8001590 <HAL_CAN_IRQHandler+0x334>
 8001532:	2b50      	cmp	r3, #80	; 0x50
 8001534:	d022      	beq.n	800157c <HAL_CAN_IRQHandler+0x320>
 8001536:	2b50      	cmp	r3, #80	; 0x50
 8001538:	d82a      	bhi.n	8001590 <HAL_CAN_IRQHandler+0x334>
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d019      	beq.n	8001572 <HAL_CAN_IRQHandler+0x316>
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	d826      	bhi.n	8001590 <HAL_CAN_IRQHandler+0x334>
 8001542:	2b30      	cmp	r3, #48	; 0x30
 8001544:	d010      	beq.n	8001568 <HAL_CAN_IRQHandler+0x30c>
 8001546:	2b30      	cmp	r3, #48	; 0x30
 8001548:	d822      	bhi.n	8001590 <HAL_CAN_IRQHandler+0x334>
 800154a:	2b10      	cmp	r3, #16
 800154c:	d002      	beq.n	8001554 <HAL_CAN_IRQHandler+0x2f8>
 800154e:	2b20      	cmp	r3, #32
 8001550:	d005      	beq.n	800155e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001552:	e01d      	b.n	8001590 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800155c:	e019      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001566:	e014      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001570:	e00f      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800157a:	e00a      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001584:	e005      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800158e:	e000      	b.n	8001592 <HAL_CAN_IRQHandler+0x336>
            break;
 8001590:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f867 	bl	8001690 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	; 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2204      	movs	r2, #4
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e020      	b.n	8001928 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 020e 	bic.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	2101      	movs	r1, #1
 8001910:	fa01 f202 	lsl.w	r2, r1, r2
 8001914:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001946:	2b02      	cmp	r3, #2
 8001948:	d005      	beq.n	8001956 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2204      	movs	r2, #4
 800194e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e051      	b.n	80019fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 020e 	bic.w	r2, r2, #14
 8001964:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_DMA_Abort_IT+0xd0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d029      	beq.n	80019d4 <HAL_DMA_Abort_IT+0xa0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <HAL_DMA_Abort_IT+0xd4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d022      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x9c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <HAL_DMA_Abort_IT+0xd8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d01a      	beq.n	80019ca <HAL_DMA_Abort_IT+0x96>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_DMA_Abort_IT+0xdc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d012      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x90>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_DMA_Abort_IT+0xe0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00a      	beq.n	80019be <HAL_DMA_Abort_IT+0x8a>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_DMA_Abort_IT+0xe4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d102      	bne.n	80019b8 <HAL_DMA_Abort_IT+0x84>
 80019b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019b6:	e00e      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019bc:	e00b      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	e008      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	e005      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ce:	e002      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019d0:	2310      	movs	r3, #16
 80019d2:	e000      	b.n	80019d6 <HAL_DMA_Abort_IT+0xa2>
 80019d4:	2301      	movs	r3, #1
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_DMA_Abort_IT+0xe8>)
 80019d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
    } 
  }
  return status;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40020008 	.word	0x40020008
 8001a08:	4002001c 	.word	0x4002001c
 8001a0c:	40020030 	.word	0x40020030
 8001a10:	40020044 	.word	0x40020044
 8001a14:	40020058 	.word	0x40020058
 8001a18:	4002006c 	.word	0x4002006c
 8001a1c:	40020000 	.word	0x40020000

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b08b      	sub	sp, #44	; 0x2c
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e169      	b.n	8001d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a34:	2201      	movs	r2, #1
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8158 	bne.w	8001d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a9a      	ldr	r2, [pc, #616]	; (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d05e      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a5c:	4a98      	ldr	r2, [pc, #608]	; (8001cc0 <HAL_GPIO_Init+0x2a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d875      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a62:	4a98      	ldr	r2, [pc, #608]	; (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d058      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a68:	4a96      	ldr	r2, [pc, #600]	; (8001cc4 <HAL_GPIO_Init+0x2a4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d86f      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a6e:	4a96      	ldr	r2, [pc, #600]	; (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d052      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a74:	4a94      	ldr	r2, [pc, #592]	; (8001cc8 <HAL_GPIO_Init+0x2a8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d869      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a7a:	4a94      	ldr	r2, [pc, #592]	; (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04c      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a80:	4a92      	ldr	r2, [pc, #584]	; (8001ccc <HAL_GPIO_Init+0x2ac>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d863      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a86:	4a92      	ldr	r2, [pc, #584]	; (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d046      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
 8001a8c:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d85d      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d82a      	bhi.n	8001aec <HAL_GPIO_Init+0xcc>
 8001a96:	2b12      	cmp	r3, #18
 8001a98:	d859      	bhi.n	8001b4e <HAL_GPIO_Init+0x12e>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_GPIO_Init+0x80>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001b1b 	.word	0x08001b1b
 8001aa4:	08001af5 	.word	0x08001af5
 8001aa8:	08001b07 	.word	0x08001b07
 8001aac:	08001b49 	.word	0x08001b49
 8001ab0:	08001b4f 	.word	0x08001b4f
 8001ab4:	08001b4f 	.word	0x08001b4f
 8001ab8:	08001b4f 	.word	0x08001b4f
 8001abc:	08001b4f 	.word	0x08001b4f
 8001ac0:	08001b4f 	.word	0x08001b4f
 8001ac4:	08001b4f 	.word	0x08001b4f
 8001ac8:	08001b4f 	.word	0x08001b4f
 8001acc:	08001b4f 	.word	0x08001b4f
 8001ad0:	08001b4f 	.word	0x08001b4f
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b4f 	.word	0x08001b4f
 8001adc:	08001b4f 	.word	0x08001b4f
 8001ae0:	08001b4f 	.word	0x08001b4f
 8001ae4:	08001afd 	.word	0x08001afd
 8001ae8:	08001b11 	.word	0x08001b11
 8001aec:	4a79      	ldr	r2, [pc, #484]	; (8001cd4 <HAL_GPIO_Init+0x2b4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e029      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e024      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01f      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e01a      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e013      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e009      	b.n	8001b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x130>
          break;
 8001b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d801      	bhi.n	8001b5a <HAL_GPIO_Init+0x13a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	e001      	b.n	8001b5e <HAL_GPIO_Init+0x13e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2bff      	cmp	r3, #255	; 0xff
 8001b64:	d802      	bhi.n	8001b6c <HAL_GPIO_Init+0x14c>
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x152>
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	210f      	movs	r1, #15
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	6a39      	ldr	r1, [r7, #32]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80b1 	beq.w	8001d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x2b8>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb8:	4a48      	ldr	r2, [pc, #288]	; (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <HAL_GPIO_Init+0x2c0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1ec>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a3f      	ldr	r2, [pc, #252]	; (8001ce4 <HAL_GPIO_Init+0x2c4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1e8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3e      	ldr	r2, [pc, #248]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3d      	ldr	r2, [pc, #244]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e0>
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e006      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e004      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <HAL_GPIO_Init+0x1ee>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	4093      	lsls	r3, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1e:	492f      	ldr	r1, [pc, #188]	; (8001cdc <HAL_GPIO_Init+0x2bc>)
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3302      	adds	r3, #2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	492c      	ldr	r1, [pc, #176]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4928      	ldr	r1, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	491e      	ldr	r1, [pc, #120]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4918      	ldr	r1, [pc, #96]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4914      	ldr	r1, [pc, #80]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d021      	beq.n	8001cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
 8001cbc:	e021      	b.n	8001d02 <HAL_GPIO_Init+0x2e2>
 8001cbe:	bf00      	nop
 8001cc0:	10320000 	.word	0x10320000
 8001cc4:	10310000 	.word	0x10310000
 8001cc8:	10220000 	.word	0x10220000
 8001ccc:	10210000 	.word	0x10210000
 8001cd0:	10120000 	.word	0x10120000
 8001cd4:	10110000 	.word	0x10110000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	40011400 	.word	0x40011400
 8001cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	4909      	ldr	r1, [pc, #36]	; (8001d24 <HAL_GPIO_Init+0x304>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f ae8e 	bne.w	8001a34 <HAL_GPIO_Init+0x14>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	372c      	adds	r7, #44	; 0x2c
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	40010400 	.word	0x40010400

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43d9      	mvns	r1, r3
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	400b      	ands	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	611a      	str	r2, [r3, #16]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e26c      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4b8f      	ldr	r3, [pc, #572]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e246      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x76>
 8001df4:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7f      	ldr	r2, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xbc>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe fdd6 	bl	8000a18 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7fe fdd2 	bl	8000a18 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1fa      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe4>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe fdc2 	bl	8000a18 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe fdbe 	bl	8000a18 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1e6      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x10c>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
 8001ede:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1ba      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4939      	ldr	r1, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fd77 	bl	8000a18 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7fe fd73 	bl	8000a18 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e19b      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fd56 	bl	8000a18 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7fe fd52 	bl	8000a18 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e17a      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03a      	beq.n	8002010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fd36 	bl	8000a18 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fd32 	bl	8000a18 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e15a      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 fad8 	bl	8002584 <RCC_Delay>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fd1c 	bl	8000a18 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fd18 	bl	8000a18 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e140      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b9e      	ldr	r3, [pc, #632]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a6 	beq.w	800216a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b97      	ldr	r3, [pc, #604]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b94      	ldr	r3, [pc, #592]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a93      	ldr	r2, [pc, #588]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b8e      	ldr	r3, [pc, #568]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a8a      	ldr	r2, [pc, #552]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7fe fcd9 	bl	8000a18 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7fe fcd5 	bl	8000a18 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0fd      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b81      	ldr	r3, [pc, #516]	; (8002284 <HAL_RCC_OscConfig+0x4f8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002090:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a75      	ldr	r2, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a72      	ldr	r2, [pc, #456]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x356>
 80020c8:	4b6d      	ldr	r3, [pc, #436]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a6c      	ldr	r2, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a66      	ldr	r2, [pc, #408]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a63      	ldr	r2, [pc, #396]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7fe fc89 	bl	8000a18 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fc85 	bl	8000a18 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0ab      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x37e>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7fe fc73 	bl	8000a18 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe fc6f 	bl	8000a18 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e095      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b48      	ldr	r3, [pc, #288]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8081 	beq.w	8002276 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d061      	beq.n	8002244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x4fc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe fc43 	bl	8000a18 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fc3f 	bl	8000a18 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e067      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	430b      	orrs	r3, r1
 80021e2:	4927      	ldr	r1, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_OscConfig+0x4fc>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fc13 	bl	8000a18 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fc0f 	bl	8000a18 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e037      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
 8002214:	e02f      	b.n	8002276 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <HAL_RCC_OscConfig+0x4fc>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fbfc 	bl	8000a18 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fbf8 	bl	8000a18 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e020      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
 8002242:	e018      	b.n	8002276 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e013      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	429a      	cmp	r2, r3
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	429a      	cmp	r2, r3
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420060 	.word	0x42420060

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4965      	ldr	r1, [pc, #404]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800230a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fb4c 	bl	8000a18 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fb48 	bl	8000a18 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4922      	ldr	r1, [pc, #136]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe faaa 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08003a0c 	.word	0x08003a0c
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b490      	push	{r4, r7}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002468:	1d3c      	adds	r4, r7, #4
 800246a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800246c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002470:	f240 2301 	movw	r3, #513	; 0x201
 8002474:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x40>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x46>
 800249e:	e02d      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a2:	623b      	str	r3, [r7, #32]
      break;
 80024a4:	e02d      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024b2:	4413      	add	r3, r2
 80024b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0c5b      	lsrs	r3, r3, #17
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024d2:	4413      	add	r3, r2
 80024d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024de:	fb02 f203 	mul.w	r2, r2, r3
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	e004      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	623b      	str	r3, [r7, #32]
      break;
 80024fa:	e002      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fe:	623b      	str	r3, [r7, #32]
      break;
 8002500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002502:	6a3b      	ldr	r3, [r7, #32]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bc90      	pop	{r4, r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	080039fc 	.word	0x080039fc
 8002514:	40021000 	.word	0x40021000
 8002518:	007a1200 	.word	0x007a1200
 800251c:	003d0900 	.word	0x003d0900

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b02      	ldr	r3, [pc, #8]	; (8002530 <HAL_RCC_GetHCLKFreq+0x10>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002538:	f7ff fff2 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 800253c:	4602      	mov	r2, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	08003a1c 	.word	0x08003a1c

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffde 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0adb      	lsrs	r3, r3, #11
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08003a1c 	.word	0x08003a1c

08002584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <RCC_Delay+0x34>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <RCC_Delay+0x38>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	0a5b      	lsrs	r3, r3, #9
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025a0:	bf00      	nop
  }
  while (Delay --);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	60fa      	str	r2, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f9      	bne.n	80025a0 <RCC_Delay+0x1c>
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000000 	.word	0x20000000
 80025bc:	10624dd3 	.word	0x10624dd3

080025c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e03f      	b.n	8002652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f8ce 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fc8f 	bl	8002f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b08a      	sub	sp, #40	; 0x28
 800265e:	af02      	add	r7, sp, #8
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	d17c      	bne.n	8002774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HAL_UART_Transmit+0x2c>
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e075      	b.n	8002776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_UART_Transmit+0x3e>
 8002694:	2302      	movs	r3, #2
 8002696:	e06e      	b.n	8002776 <HAL_UART_Transmit+0x11c>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ae:	f7fe f9b3 	bl	8000a18 <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d108      	bne.n	80026dc <HAL_UART_Transmit+0x82>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e003      	b.n	80026e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026ec:	e02a      	b.n	8002744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fa41 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e036      	b.n	8002776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800271c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	3302      	adds	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	e007      	b.n	8002736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	781a      	ldrb	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1cf      	bne.n	80026ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2200      	movs	r2, #0
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa11 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e006      	b.n	8002776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b20      	cmp	r3, #32
 8002796:	d11d      	bne.n	80027d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_UART_Receive_IT+0x26>
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e016      	b.n	80027d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Receive_IT+0x38>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e00f      	b.n	80027d6 <HAL_UART_Receive_IT+0x58>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fa22 	bl	8002c14 <UART_Start_Receive_IT>
 80027d0:	4603      	mov	r3, r0
 80027d2:	e000      	b.n	80027d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_UART_IRQHandler+0x52>
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fad2 	bl	8002dd4 <UART_Receive_IT>
      return;
 8002830:	e17b      	b.n	8002b2a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80b1 	beq.w	800299c <HAL_UART_IRQHandler+0x1bc>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_UART_IRQHandler+0x70>
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a6 	beq.w	800299c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_UART_IRQHandler+0x90>
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f043 0201 	orr.w	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_UART_IRQHandler+0xb0>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_UART_IRQHandler+0xd0>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0204 	orr.w	r2, r3, #4
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00f      	beq.n	80028da <HAL_UART_IRQHandler+0xfa>
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_UART_IRQHandler+0xee>
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0208 	orr.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 811e 	beq.w	8002b20 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_UART_IRQHandler+0x11e>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fa6b 	bl	8002dd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <HAL_UART_IRQHandler+0x146>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d031      	beq.n	800298a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9ad 	bl	8002c86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d023      	beq.n	8002982 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002948:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	4a76      	ldr	r2, [pc, #472]	; (8002b30 <HAL_UART_IRQHandler+0x350>)
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ffe8 	bl	8001934 <HAL_DMA_Abort_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002974:	4610      	mov	r0, r2
 8002976:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002978:	e00e      	b.n	8002998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8ec 	bl	8002b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	e00a      	b.n	8002998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8e8 	bl	8002b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	e006      	b.n	8002998 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8e4 	bl	8002b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002996:	e0c3      	b.n	8002b20 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	bf00      	nop
    return;
 800299a:	e0c1      	b.n	8002b20 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 80a1 	bne.w	8002ae8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 809b 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8095 	beq.w	8002ae8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04e      	beq.n	8002a80 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80029ec:	8a3b      	ldrh	r3, [r7, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8098 	beq.w	8002b24 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029f8:	8a3a      	ldrh	r2, [r7, #16]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	f080 8092 	bcs.w	8002b24 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8a3a      	ldrh	r2, [r7, #16]
 8002a04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d02b      	beq.n	8002a68 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a1e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a3e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0210 	bic.w	r2, r2, #16
 8002a5c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe ff2b 	bl	80018be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f876 	bl	8002b6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a7e:	e051      	b.n	8002b24 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d047      	beq.n	8002b28 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002a98:	8a7b      	ldrh	r3, [r7, #18]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d044      	beq.n	8002b28 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002aac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002adc:	8a7b      	ldrh	r3, [r7, #18]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f842 	bl	8002b6a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002ae6:	e01f      	b.n	8002b28 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_UART_IRQHandler+0x324>
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f902 	bl	8002d06 <UART_Transmit_IT>
    return;
 8002b02:	e012      	b.n	8002b2a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <HAL_UART_IRQHandler+0x34a>
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f943 	bl	8002da4 <UART_EndTransmit_IT>
    return;
 8002b1e:	e004      	b.n	8002b2a <HAL_UART_IRQHandler+0x34a>
    return;
 8002b20:	bf00      	nop
 8002b22:	e002      	b.n	8002b2a <HAL_UART_IRQHandler+0x34a>
      return;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_UART_IRQHandler+0x34a>
      return;
 8002b28:	bf00      	nop
  }
}
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	08002cdf 	.word	0x08002cdf

08002b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	e02c      	b.n	8002bec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d028      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba0:	f7fd ff3a 	bl	8000a18 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d21d      	bcs.n	8002bec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e00f      	b.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d0c3      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2222      	movs	r2, #34	; 0x22
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0210 	bic.w	r2, r2, #16
 8002cc4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff ff2d 	bl	8002b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b21      	cmp	r3, #33	; 0x21
 8002d18:	d13e      	bne.n	8002d98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d22:	d114      	bne.n	8002d4e <UART_Transmit_IT+0x48>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d110      	bne.n	8002d4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e008      	b.n	8002d60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	1c59      	adds	r1, r3, #1
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6211      	str	r1, [r2, #32]
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff feb5 	bl	8002b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b22      	cmp	r3, #34	; 0x22
 8002de6:	f040 8099 	bne.w	8002f1c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	d117      	bne.n	8002e24 <UART_Receive_IT+0x50>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d113      	bne.n	8002e24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
 8002e22:	e026      	b.n	8002e72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d007      	beq.n	8002e48 <UART_Receive_IT+0x74>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <UART_Receive_IT+0x82>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e008      	b.n	8002e68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d148      	bne.n	8002f18 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0220 	bic.w	r2, r2, #32
 8002e94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d123      	bne.n	8002f0e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0210 	bic.w	r2, r2, #16
 8002eda:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d10a      	bne.n	8002f00 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fe2f 	bl	8002b6a <HAL_UARTEx_RxEventCallback>
 8002f0c:	e002      	b.n	8002f14 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fe19 	bl	8002b46 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e002      	b.n	8002f1e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f62:	f023 030c 	bic.w	r3, r3, #12
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2c      	ldr	r2, [pc, #176]	; (800303c <UART_SetConfig+0x114>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f90:	f7ff fae4 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	e002      	b.n	8002f9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f98:	f7ff facc 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8002f9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009a      	lsls	r2, r3, #2
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <UART_SetConfig+0x118>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	0119      	lsls	r1, r3, #4
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009a      	lsls	r2, r3, #2
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <UART_SetConfig+0x118>)
 8002fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	2064      	movs	r0, #100	; 0x64
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	3332      	adds	r3, #50	; 0x32
 8002fe8:	4a15      	ldr	r2, [pc, #84]	; (8003040 <UART_SetConfig+0x118>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff4:	4419      	add	r1, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009a      	lsls	r2, r3, #2
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <UART_SetConfig+0x118>)
 800300e:	fba3 0302 	umull	r0, r3, r3, r2
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2064      	movs	r0, #100	; 0x64
 8003016:	fb00 f303 	mul.w	r3, r0, r3
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	3332      	adds	r3, #50	; 0x32
 8003020:	4a07      	ldr	r2, [pc, #28]	; (8003040 <UART_SetConfig+0x118>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	440a      	add	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40013800 	.word	0x40013800
 8003040:	51eb851f 	.word	0x51eb851f

08003044 <__errno>:
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__errno+0x8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	2600      	movs	r6, #0
 8003054:	4d0c      	ldr	r5, [pc, #48]	; (8003088 <__libc_init_array+0x38>)
 8003056:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003058:	1b64      	subs	r4, r4, r5
 800305a:	10a4      	asrs	r4, r4, #2
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	f000 fc5c 	bl	800391c <_init>
 8003064:	2600      	movs	r6, #0
 8003066:	4d0a      	ldr	r5, [pc, #40]	; (8003090 <__libc_init_array+0x40>)
 8003068:	4c0a      	ldr	r4, [pc, #40]	; (8003094 <__libc_init_array+0x44>)
 800306a:	1b64      	subs	r4, r4, r5
 800306c:	10a4      	asrs	r4, r4, #2
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08003a58 	.word	0x08003a58
 800308c:	08003a58 	.word	0x08003a58
 8003090:	08003a58 	.word	0x08003a58
 8003094:	08003a5c 	.word	0x08003a5c

08003098 <memset>:
 8003098:	4603      	mov	r3, r0
 800309a:	4402      	add	r2, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <siprintf>:
 80030a8:	b40e      	push	{r1, r2, r3}
 80030aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030ae:	b500      	push	{lr}
 80030b0:	b09c      	sub	sp, #112	; 0x70
 80030b2:	ab1d      	add	r3, sp, #116	; 0x74
 80030b4:	9002      	str	r0, [sp, #8]
 80030b6:	9006      	str	r0, [sp, #24]
 80030b8:	9107      	str	r1, [sp, #28]
 80030ba:	9104      	str	r1, [sp, #16]
 80030bc:	4808      	ldr	r0, [pc, #32]	; (80030e0 <siprintf+0x38>)
 80030be:	4909      	ldr	r1, [pc, #36]	; (80030e4 <siprintf+0x3c>)
 80030c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80030c4:	9105      	str	r1, [sp, #20]
 80030c6:	6800      	ldr	r0, [r0, #0]
 80030c8:	a902      	add	r1, sp, #8
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	f000 f868 	bl	80031a0 <_svfiprintf_r>
 80030d0:	2200      	movs	r2, #0
 80030d2:	9b02      	ldr	r3, [sp, #8]
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	b01c      	add	sp, #112	; 0x70
 80030d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030dc:	b003      	add	sp, #12
 80030de:	4770      	bx	lr
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	ffff0208 	.word	0xffff0208

080030e8 <__ssputs_r>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	688e      	ldr	r6, [r1, #8]
 80030ee:	4682      	mov	sl, r0
 80030f0:	429e      	cmp	r6, r3
 80030f2:	460c      	mov	r4, r1
 80030f4:	4690      	mov	r8, r2
 80030f6:	461f      	mov	r7, r3
 80030f8:	d838      	bhi.n	800316c <__ssputs_r+0x84>
 80030fa:	898a      	ldrh	r2, [r1, #12]
 80030fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003100:	d032      	beq.n	8003168 <__ssputs_r+0x80>
 8003102:	6825      	ldr	r5, [r4, #0]
 8003104:	6909      	ldr	r1, [r1, #16]
 8003106:	3301      	adds	r3, #1
 8003108:	eba5 0901 	sub.w	r9, r5, r1
 800310c:	6965      	ldr	r5, [r4, #20]
 800310e:	444b      	add	r3, r9
 8003110:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003118:	106d      	asrs	r5, r5, #1
 800311a:	429d      	cmp	r5, r3
 800311c:	bf38      	it	cc
 800311e:	461d      	movcc	r5, r3
 8003120:	0553      	lsls	r3, r2, #21
 8003122:	d531      	bpl.n	8003188 <__ssputs_r+0xa0>
 8003124:	4629      	mov	r1, r5
 8003126:	f000 fb53 	bl	80037d0 <_malloc_r>
 800312a:	4606      	mov	r6, r0
 800312c:	b950      	cbnz	r0, 8003144 <__ssputs_r+0x5c>
 800312e:	230c      	movs	r3, #12
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f8ca 3000 	str.w	r3, [sl]
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	81a3      	strh	r3, [r4, #12]
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	464a      	mov	r2, r9
 8003146:	6921      	ldr	r1, [r4, #16]
 8003148:	f000 face 	bl	80036e8 <memcpy>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003156:	81a3      	strh	r3, [r4, #12]
 8003158:	6126      	str	r6, [r4, #16]
 800315a:	444e      	add	r6, r9
 800315c:	6026      	str	r6, [r4, #0]
 800315e:	463e      	mov	r6, r7
 8003160:	6165      	str	r5, [r4, #20]
 8003162:	eba5 0509 	sub.w	r5, r5, r9
 8003166:	60a5      	str	r5, [r4, #8]
 8003168:	42be      	cmp	r6, r7
 800316a:	d900      	bls.n	800316e <__ssputs_r+0x86>
 800316c:	463e      	mov	r6, r7
 800316e:	4632      	mov	r2, r6
 8003170:	4641      	mov	r1, r8
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	f000 fac6 	bl	8003704 <memmove>
 8003178:	68a3      	ldr	r3, [r4, #8]
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	1b9b      	subs	r3, r3, r6
 800317e:	4432      	add	r2, r6
 8003180:	2000      	movs	r0, #0
 8003182:	60a3      	str	r3, [r4, #8]
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	e7db      	b.n	8003140 <__ssputs_r+0x58>
 8003188:	462a      	mov	r2, r5
 800318a:	f000 fb7b 	bl	8003884 <_realloc_r>
 800318e:	4606      	mov	r6, r0
 8003190:	2800      	cmp	r0, #0
 8003192:	d1e1      	bne.n	8003158 <__ssputs_r+0x70>
 8003194:	4650      	mov	r0, sl
 8003196:	6921      	ldr	r1, [r4, #16]
 8003198:	f000 face 	bl	8003738 <_free_r>
 800319c:	e7c7      	b.n	800312e <__ssputs_r+0x46>
	...

080031a0 <_svfiprintf_r>:
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	4698      	mov	r8, r3
 80031a6:	898b      	ldrh	r3, [r1, #12]
 80031a8:	4607      	mov	r7, r0
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	460d      	mov	r5, r1
 80031ae:	4614      	mov	r4, r2
 80031b0:	b09d      	sub	sp, #116	; 0x74
 80031b2:	d50e      	bpl.n	80031d2 <_svfiprintf_r+0x32>
 80031b4:	690b      	ldr	r3, [r1, #16]
 80031b6:	b963      	cbnz	r3, 80031d2 <_svfiprintf_r+0x32>
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	f000 fb09 	bl	80037d0 <_malloc_r>
 80031be:	6028      	str	r0, [r5, #0]
 80031c0:	6128      	str	r0, [r5, #16]
 80031c2:	b920      	cbnz	r0, 80031ce <_svfiprintf_r+0x2e>
 80031c4:	230c      	movs	r3, #12
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	e0d1      	b.n	8003372 <_svfiprintf_r+0x1d2>
 80031ce:	2340      	movs	r3, #64	; 0x40
 80031d0:	616b      	str	r3, [r5, #20]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9309      	str	r3, [sp, #36]	; 0x24
 80031d6:	2320      	movs	r3, #32
 80031d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031dc:	2330      	movs	r3, #48	; 0x30
 80031de:	f04f 0901 	mov.w	r9, #1
 80031e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800338c <_svfiprintf_r+0x1ec>
 80031ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ee:	4623      	mov	r3, r4
 80031f0:	469a      	mov	sl, r3
 80031f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f6:	b10a      	cbz	r2, 80031fc <_svfiprintf_r+0x5c>
 80031f8:	2a25      	cmp	r2, #37	; 0x25
 80031fa:	d1f9      	bne.n	80031f0 <_svfiprintf_r+0x50>
 80031fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003200:	d00b      	beq.n	800321a <_svfiprintf_r+0x7a>
 8003202:	465b      	mov	r3, fp
 8003204:	4622      	mov	r2, r4
 8003206:	4629      	mov	r1, r5
 8003208:	4638      	mov	r0, r7
 800320a:	f7ff ff6d 	bl	80030e8 <__ssputs_r>
 800320e:	3001      	adds	r0, #1
 8003210:	f000 80aa 	beq.w	8003368 <_svfiprintf_r+0x1c8>
 8003214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003216:	445a      	add	r2, fp
 8003218:	9209      	str	r2, [sp, #36]	; 0x24
 800321a:	f89a 3000 	ldrb.w	r3, [sl]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a2 	beq.w	8003368 <_svfiprintf_r+0x1c8>
 8003224:	2300      	movs	r3, #0
 8003226:	f04f 32ff 	mov.w	r2, #4294967295
 800322a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800322e:	f10a 0a01 	add.w	sl, sl, #1
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	9307      	str	r3, [sp, #28]
 8003236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800323a:	931a      	str	r3, [sp, #104]	; 0x68
 800323c:	4654      	mov	r4, sl
 800323e:	2205      	movs	r2, #5
 8003240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003244:	4851      	ldr	r0, [pc, #324]	; (800338c <_svfiprintf_r+0x1ec>)
 8003246:	f000 fa41 	bl	80036cc <memchr>
 800324a:	9a04      	ldr	r2, [sp, #16]
 800324c:	b9d8      	cbnz	r0, 8003286 <_svfiprintf_r+0xe6>
 800324e:	06d0      	lsls	r0, r2, #27
 8003250:	bf44      	itt	mi
 8003252:	2320      	movmi	r3, #32
 8003254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003258:	0711      	lsls	r1, r2, #28
 800325a:	bf44      	itt	mi
 800325c:	232b      	movmi	r3, #43	; 0x2b
 800325e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003262:	f89a 3000 	ldrb.w	r3, [sl]
 8003266:	2b2a      	cmp	r3, #42	; 0x2a
 8003268:	d015      	beq.n	8003296 <_svfiprintf_r+0xf6>
 800326a:	4654      	mov	r4, sl
 800326c:	2000      	movs	r0, #0
 800326e:	f04f 0c0a 	mov.w	ip, #10
 8003272:	9a07      	ldr	r2, [sp, #28]
 8003274:	4621      	mov	r1, r4
 8003276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800327a:	3b30      	subs	r3, #48	; 0x30
 800327c:	2b09      	cmp	r3, #9
 800327e:	d94e      	bls.n	800331e <_svfiprintf_r+0x17e>
 8003280:	b1b0      	cbz	r0, 80032b0 <_svfiprintf_r+0x110>
 8003282:	9207      	str	r2, [sp, #28]
 8003284:	e014      	b.n	80032b0 <_svfiprintf_r+0x110>
 8003286:	eba0 0308 	sub.w	r3, r0, r8
 800328a:	fa09 f303 	lsl.w	r3, r9, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	46a2      	mov	sl, r4
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	e7d2      	b.n	800323c <_svfiprintf_r+0x9c>
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	1d19      	adds	r1, r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	9103      	str	r1, [sp, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bfbb      	ittet	lt
 80032a2:	425b      	neglt	r3, r3
 80032a4:	f042 0202 	orrlt.w	r2, r2, #2
 80032a8:	9307      	strge	r3, [sp, #28]
 80032aa:	9307      	strlt	r3, [sp, #28]
 80032ac:	bfb8      	it	lt
 80032ae:	9204      	strlt	r2, [sp, #16]
 80032b0:	7823      	ldrb	r3, [r4, #0]
 80032b2:	2b2e      	cmp	r3, #46	; 0x2e
 80032b4:	d10c      	bne.n	80032d0 <_svfiprintf_r+0x130>
 80032b6:	7863      	ldrb	r3, [r4, #1]
 80032b8:	2b2a      	cmp	r3, #42	; 0x2a
 80032ba:	d135      	bne.n	8003328 <_svfiprintf_r+0x188>
 80032bc:	9b03      	ldr	r3, [sp, #12]
 80032be:	3402      	adds	r4, #2
 80032c0:	1d1a      	adds	r2, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9203      	str	r2, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80032ce:	9305      	str	r3, [sp, #20]
 80032d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800339c <_svfiprintf_r+0x1fc>
 80032d4:	2203      	movs	r2, #3
 80032d6:	4650      	mov	r0, sl
 80032d8:	7821      	ldrb	r1, [r4, #0]
 80032da:	f000 f9f7 	bl	80036cc <memchr>
 80032de:	b140      	cbz	r0, 80032f2 <_svfiprintf_r+0x152>
 80032e0:	2340      	movs	r3, #64	; 0x40
 80032e2:	eba0 000a 	sub.w	r0, r0, sl
 80032e6:	fa03 f000 	lsl.w	r0, r3, r0
 80032ea:	9b04      	ldr	r3, [sp, #16]
 80032ec:	3401      	adds	r4, #1
 80032ee:	4303      	orrs	r3, r0
 80032f0:	9304      	str	r3, [sp, #16]
 80032f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f6:	2206      	movs	r2, #6
 80032f8:	4825      	ldr	r0, [pc, #148]	; (8003390 <_svfiprintf_r+0x1f0>)
 80032fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032fe:	f000 f9e5 	bl	80036cc <memchr>
 8003302:	2800      	cmp	r0, #0
 8003304:	d038      	beq.n	8003378 <_svfiprintf_r+0x1d8>
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <_svfiprintf_r+0x1f4>)
 8003308:	bb1b      	cbnz	r3, 8003352 <_svfiprintf_r+0x1b2>
 800330a:	9b03      	ldr	r3, [sp, #12]
 800330c:	3307      	adds	r3, #7
 800330e:	f023 0307 	bic.w	r3, r3, #7
 8003312:	3308      	adds	r3, #8
 8003314:	9303      	str	r3, [sp, #12]
 8003316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003318:	4433      	add	r3, r6
 800331a:	9309      	str	r3, [sp, #36]	; 0x24
 800331c:	e767      	b.n	80031ee <_svfiprintf_r+0x4e>
 800331e:	460c      	mov	r4, r1
 8003320:	2001      	movs	r0, #1
 8003322:	fb0c 3202 	mla	r2, ip, r2, r3
 8003326:	e7a5      	b.n	8003274 <_svfiprintf_r+0xd4>
 8003328:	2300      	movs	r3, #0
 800332a:	f04f 0c0a 	mov.w	ip, #10
 800332e:	4619      	mov	r1, r3
 8003330:	3401      	adds	r4, #1
 8003332:	9305      	str	r3, [sp, #20]
 8003334:	4620      	mov	r0, r4
 8003336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800333a:	3a30      	subs	r2, #48	; 0x30
 800333c:	2a09      	cmp	r2, #9
 800333e:	d903      	bls.n	8003348 <_svfiprintf_r+0x1a8>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0c5      	beq.n	80032d0 <_svfiprintf_r+0x130>
 8003344:	9105      	str	r1, [sp, #20]
 8003346:	e7c3      	b.n	80032d0 <_svfiprintf_r+0x130>
 8003348:	4604      	mov	r4, r0
 800334a:	2301      	movs	r3, #1
 800334c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003350:	e7f0      	b.n	8003334 <_svfiprintf_r+0x194>
 8003352:	ab03      	add	r3, sp, #12
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	462a      	mov	r2, r5
 8003358:	4638      	mov	r0, r7
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <_svfiprintf_r+0x1f8>)
 800335c:	a904      	add	r1, sp, #16
 800335e:	f3af 8000 	nop.w
 8003362:	1c42      	adds	r2, r0, #1
 8003364:	4606      	mov	r6, r0
 8003366:	d1d6      	bne.n	8003316 <_svfiprintf_r+0x176>
 8003368:	89ab      	ldrh	r3, [r5, #12]
 800336a:	065b      	lsls	r3, r3, #25
 800336c:	f53f af2c 	bmi.w	80031c8 <_svfiprintf_r+0x28>
 8003370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003372:	b01d      	add	sp, #116	; 0x74
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	ab03      	add	r3, sp, #12
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	462a      	mov	r2, r5
 800337e:	4638      	mov	r0, r7
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <_svfiprintf_r+0x1f8>)
 8003382:	a904      	add	r1, sp, #16
 8003384:	f000 f87c 	bl	8003480 <_printf_i>
 8003388:	e7eb      	b.n	8003362 <_svfiprintf_r+0x1c2>
 800338a:	bf00      	nop
 800338c:	08003a24 	.word	0x08003a24
 8003390:	08003a2e 	.word	0x08003a2e
 8003394:	00000000 	.word	0x00000000
 8003398:	080030e9 	.word	0x080030e9
 800339c:	08003a2a 	.word	0x08003a2a

080033a0 <_printf_common>:
 80033a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	4616      	mov	r6, r2
 80033a6:	4699      	mov	r9, r3
 80033a8:	688a      	ldr	r2, [r1, #8]
 80033aa:	690b      	ldr	r3, [r1, #16]
 80033ac:	4607      	mov	r7, r0
 80033ae:	4293      	cmp	r3, r2
 80033b0:	bfb8      	it	lt
 80033b2:	4613      	movlt	r3, r2
 80033b4:	6033      	str	r3, [r6, #0]
 80033b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ba:	460c      	mov	r4, r1
 80033bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033c0:	b10a      	cbz	r2, 80033c6 <_printf_common+0x26>
 80033c2:	3301      	adds	r3, #1
 80033c4:	6033      	str	r3, [r6, #0]
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	0699      	lsls	r1, r3, #26
 80033ca:	bf42      	ittt	mi
 80033cc:	6833      	ldrmi	r3, [r6, #0]
 80033ce:	3302      	addmi	r3, #2
 80033d0:	6033      	strmi	r3, [r6, #0]
 80033d2:	6825      	ldr	r5, [r4, #0]
 80033d4:	f015 0506 	ands.w	r5, r5, #6
 80033d8:	d106      	bne.n	80033e8 <_printf_common+0x48>
 80033da:	f104 0a19 	add.w	sl, r4, #25
 80033de:	68e3      	ldr	r3, [r4, #12]
 80033e0:	6832      	ldr	r2, [r6, #0]
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	42ab      	cmp	r3, r5
 80033e6:	dc28      	bgt.n	800343a <_printf_common+0x9a>
 80033e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033ec:	1e13      	subs	r3, r2, #0
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	bf18      	it	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	0692      	lsls	r2, r2, #26
 80033f6:	d42d      	bmi.n	8003454 <_printf_common+0xb4>
 80033f8:	4649      	mov	r1, r9
 80033fa:	4638      	mov	r0, r7
 80033fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003400:	47c0      	blx	r8
 8003402:	3001      	adds	r0, #1
 8003404:	d020      	beq.n	8003448 <_printf_common+0xa8>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	68e5      	ldr	r5, [r4, #12]
 800340a:	f003 0306 	and.w	r3, r3, #6
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf18      	it	ne
 8003412:	2500      	movne	r5, #0
 8003414:	6832      	ldr	r2, [r6, #0]
 8003416:	f04f 0600 	mov.w	r6, #0
 800341a:	68a3      	ldr	r3, [r4, #8]
 800341c:	bf08      	it	eq
 800341e:	1aad      	subeq	r5, r5, r2
 8003420:	6922      	ldr	r2, [r4, #16]
 8003422:	bf08      	it	eq
 8003424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003428:	4293      	cmp	r3, r2
 800342a:	bfc4      	itt	gt
 800342c:	1a9b      	subgt	r3, r3, r2
 800342e:	18ed      	addgt	r5, r5, r3
 8003430:	341a      	adds	r4, #26
 8003432:	42b5      	cmp	r5, r6
 8003434:	d11a      	bne.n	800346c <_printf_common+0xcc>
 8003436:	2000      	movs	r0, #0
 8003438:	e008      	b.n	800344c <_printf_common+0xac>
 800343a:	2301      	movs	r3, #1
 800343c:	4652      	mov	r2, sl
 800343e:	4649      	mov	r1, r9
 8003440:	4638      	mov	r0, r7
 8003442:	47c0      	blx	r8
 8003444:	3001      	adds	r0, #1
 8003446:	d103      	bne.n	8003450 <_printf_common+0xb0>
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003450:	3501      	adds	r5, #1
 8003452:	e7c4      	b.n	80033de <_printf_common+0x3e>
 8003454:	2030      	movs	r0, #48	; 0x30
 8003456:	18e1      	adds	r1, r4, r3
 8003458:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003462:	4422      	add	r2, r4
 8003464:	3302      	adds	r3, #2
 8003466:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800346a:	e7c5      	b.n	80033f8 <_printf_common+0x58>
 800346c:	2301      	movs	r3, #1
 800346e:	4622      	mov	r2, r4
 8003470:	4649      	mov	r1, r9
 8003472:	4638      	mov	r0, r7
 8003474:	47c0      	blx	r8
 8003476:	3001      	adds	r0, #1
 8003478:	d0e6      	beq.n	8003448 <_printf_common+0xa8>
 800347a:	3601      	adds	r6, #1
 800347c:	e7d9      	b.n	8003432 <_printf_common+0x92>
	...

08003480 <_printf_i>:
 8003480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003484:	460c      	mov	r4, r1
 8003486:	7e27      	ldrb	r7, [r4, #24]
 8003488:	4691      	mov	r9, r2
 800348a:	2f78      	cmp	r7, #120	; 0x78
 800348c:	4680      	mov	r8, r0
 800348e:	469a      	mov	sl, r3
 8003490:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003496:	d807      	bhi.n	80034a8 <_printf_i+0x28>
 8003498:	2f62      	cmp	r7, #98	; 0x62
 800349a:	d80a      	bhi.n	80034b2 <_printf_i+0x32>
 800349c:	2f00      	cmp	r7, #0
 800349e:	f000 80d9 	beq.w	8003654 <_printf_i+0x1d4>
 80034a2:	2f58      	cmp	r7, #88	; 0x58
 80034a4:	f000 80a4 	beq.w	80035f0 <_printf_i+0x170>
 80034a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034b0:	e03a      	b.n	8003528 <_printf_i+0xa8>
 80034b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034b6:	2b15      	cmp	r3, #21
 80034b8:	d8f6      	bhi.n	80034a8 <_printf_i+0x28>
 80034ba:	a001      	add	r0, pc, #4	; (adr r0, 80034c0 <_printf_i+0x40>)
 80034bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034c0:	08003519 	.word	0x08003519
 80034c4:	0800352d 	.word	0x0800352d
 80034c8:	080034a9 	.word	0x080034a9
 80034cc:	080034a9 	.word	0x080034a9
 80034d0:	080034a9 	.word	0x080034a9
 80034d4:	080034a9 	.word	0x080034a9
 80034d8:	0800352d 	.word	0x0800352d
 80034dc:	080034a9 	.word	0x080034a9
 80034e0:	080034a9 	.word	0x080034a9
 80034e4:	080034a9 	.word	0x080034a9
 80034e8:	080034a9 	.word	0x080034a9
 80034ec:	0800363b 	.word	0x0800363b
 80034f0:	0800355d 	.word	0x0800355d
 80034f4:	0800361d 	.word	0x0800361d
 80034f8:	080034a9 	.word	0x080034a9
 80034fc:	080034a9 	.word	0x080034a9
 8003500:	0800365d 	.word	0x0800365d
 8003504:	080034a9 	.word	0x080034a9
 8003508:	0800355d 	.word	0x0800355d
 800350c:	080034a9 	.word	0x080034a9
 8003510:	080034a9 	.word	0x080034a9
 8003514:	08003625 	.word	0x08003625
 8003518:	680b      	ldr	r3, [r1, #0]
 800351a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	600a      	str	r2, [r1, #0]
 8003524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003528:	2301      	movs	r3, #1
 800352a:	e0a4      	b.n	8003676 <_printf_i+0x1f6>
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	6808      	ldr	r0, [r1, #0]
 8003530:	062e      	lsls	r6, r5, #24
 8003532:	f100 0304 	add.w	r3, r0, #4
 8003536:	d50a      	bpl.n	800354e <_printf_i+0xce>
 8003538:	6805      	ldr	r5, [r0, #0]
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	2d00      	cmp	r5, #0
 800353e:	da03      	bge.n	8003548 <_printf_i+0xc8>
 8003540:	232d      	movs	r3, #45	; 0x2d
 8003542:	426d      	negs	r5, r5
 8003544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003548:	230a      	movs	r3, #10
 800354a:	485e      	ldr	r0, [pc, #376]	; (80036c4 <_printf_i+0x244>)
 800354c:	e019      	b.n	8003582 <_printf_i+0x102>
 800354e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003552:	6805      	ldr	r5, [r0, #0]
 8003554:	600b      	str	r3, [r1, #0]
 8003556:	bf18      	it	ne
 8003558:	b22d      	sxthne	r5, r5
 800355a:	e7ef      	b.n	800353c <_printf_i+0xbc>
 800355c:	680b      	ldr	r3, [r1, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	1d18      	adds	r0, r3, #4
 8003562:	6008      	str	r0, [r1, #0]
 8003564:	0628      	lsls	r0, r5, #24
 8003566:	d501      	bpl.n	800356c <_printf_i+0xec>
 8003568:	681d      	ldr	r5, [r3, #0]
 800356a:	e002      	b.n	8003572 <_printf_i+0xf2>
 800356c:	0669      	lsls	r1, r5, #25
 800356e:	d5fb      	bpl.n	8003568 <_printf_i+0xe8>
 8003570:	881d      	ldrh	r5, [r3, #0]
 8003572:	2f6f      	cmp	r7, #111	; 0x6f
 8003574:	bf0c      	ite	eq
 8003576:	2308      	moveq	r3, #8
 8003578:	230a      	movne	r3, #10
 800357a:	4852      	ldr	r0, [pc, #328]	; (80036c4 <_printf_i+0x244>)
 800357c:	2100      	movs	r1, #0
 800357e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003582:	6866      	ldr	r6, [r4, #4]
 8003584:	2e00      	cmp	r6, #0
 8003586:	bfa8      	it	ge
 8003588:	6821      	ldrge	r1, [r4, #0]
 800358a:	60a6      	str	r6, [r4, #8]
 800358c:	bfa4      	itt	ge
 800358e:	f021 0104 	bicge.w	r1, r1, #4
 8003592:	6021      	strge	r1, [r4, #0]
 8003594:	b90d      	cbnz	r5, 800359a <_printf_i+0x11a>
 8003596:	2e00      	cmp	r6, #0
 8003598:	d04d      	beq.n	8003636 <_printf_i+0x1b6>
 800359a:	4616      	mov	r6, r2
 800359c:	fbb5 f1f3 	udiv	r1, r5, r3
 80035a0:	fb03 5711 	mls	r7, r3, r1, r5
 80035a4:	5dc7      	ldrb	r7, [r0, r7]
 80035a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035aa:	462f      	mov	r7, r5
 80035ac:	42bb      	cmp	r3, r7
 80035ae:	460d      	mov	r5, r1
 80035b0:	d9f4      	bls.n	800359c <_printf_i+0x11c>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10b      	bne.n	80035ce <_printf_i+0x14e>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	07df      	lsls	r7, r3, #31
 80035ba:	d508      	bpl.n	80035ce <_printf_i+0x14e>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	6861      	ldr	r1, [r4, #4]
 80035c0:	4299      	cmp	r1, r3
 80035c2:	bfde      	ittt	le
 80035c4:	2330      	movle	r3, #48	; 0x30
 80035c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035ce:	1b92      	subs	r2, r2, r6
 80035d0:	6122      	str	r2, [r4, #16]
 80035d2:	464b      	mov	r3, r9
 80035d4:	4621      	mov	r1, r4
 80035d6:	4640      	mov	r0, r8
 80035d8:	f8cd a000 	str.w	sl, [sp]
 80035dc:	aa03      	add	r2, sp, #12
 80035de:	f7ff fedf 	bl	80033a0 <_printf_common>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d14c      	bne.n	8003680 <_printf_i+0x200>
 80035e6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ea:	b004      	add	sp, #16
 80035ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f0:	4834      	ldr	r0, [pc, #208]	; (80036c4 <_printf_i+0x244>)
 80035f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80035f6:	680e      	ldr	r6, [r1, #0]
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80035fe:	061f      	lsls	r7, r3, #24
 8003600:	600e      	str	r6, [r1, #0]
 8003602:	d514      	bpl.n	800362e <_printf_i+0x1ae>
 8003604:	07d9      	lsls	r1, r3, #31
 8003606:	bf44      	itt	mi
 8003608:	f043 0320 	orrmi.w	r3, r3, #32
 800360c:	6023      	strmi	r3, [r4, #0]
 800360e:	b91d      	cbnz	r5, 8003618 <_printf_i+0x198>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	f023 0320 	bic.w	r3, r3, #32
 8003616:	6023      	str	r3, [r4, #0]
 8003618:	2310      	movs	r3, #16
 800361a:	e7af      	b.n	800357c <_printf_i+0xfc>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f043 0320 	orr.w	r3, r3, #32
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	2378      	movs	r3, #120	; 0x78
 8003626:	4828      	ldr	r0, [pc, #160]	; (80036c8 <_printf_i+0x248>)
 8003628:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800362c:	e7e3      	b.n	80035f6 <_printf_i+0x176>
 800362e:	065e      	lsls	r6, r3, #25
 8003630:	bf48      	it	mi
 8003632:	b2ad      	uxthmi	r5, r5
 8003634:	e7e6      	b.n	8003604 <_printf_i+0x184>
 8003636:	4616      	mov	r6, r2
 8003638:	e7bb      	b.n	80035b2 <_printf_i+0x132>
 800363a:	680b      	ldr	r3, [r1, #0]
 800363c:	6826      	ldr	r6, [r4, #0]
 800363e:	1d1d      	adds	r5, r3, #4
 8003640:	6960      	ldr	r0, [r4, #20]
 8003642:	600d      	str	r5, [r1, #0]
 8003644:	0635      	lsls	r5, r6, #24
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	d501      	bpl.n	800364e <_printf_i+0x1ce>
 800364a:	6018      	str	r0, [r3, #0]
 800364c:	e002      	b.n	8003654 <_printf_i+0x1d4>
 800364e:	0671      	lsls	r1, r6, #25
 8003650:	d5fb      	bpl.n	800364a <_printf_i+0x1ca>
 8003652:	8018      	strh	r0, [r3, #0]
 8003654:	2300      	movs	r3, #0
 8003656:	4616      	mov	r6, r2
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	e7ba      	b.n	80035d2 <_printf_i+0x152>
 800365c:	680b      	ldr	r3, [r1, #0]
 800365e:	1d1a      	adds	r2, r3, #4
 8003660:	600a      	str	r2, [r1, #0]
 8003662:	681e      	ldr	r6, [r3, #0]
 8003664:	2100      	movs	r1, #0
 8003666:	4630      	mov	r0, r6
 8003668:	6862      	ldr	r2, [r4, #4]
 800366a:	f000 f82f 	bl	80036cc <memchr>
 800366e:	b108      	cbz	r0, 8003674 <_printf_i+0x1f4>
 8003670:	1b80      	subs	r0, r0, r6
 8003672:	6060      	str	r0, [r4, #4]
 8003674:	6863      	ldr	r3, [r4, #4]
 8003676:	6123      	str	r3, [r4, #16]
 8003678:	2300      	movs	r3, #0
 800367a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800367e:	e7a8      	b.n	80035d2 <_printf_i+0x152>
 8003680:	4632      	mov	r2, r6
 8003682:	4649      	mov	r1, r9
 8003684:	4640      	mov	r0, r8
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	47d0      	blx	sl
 800368a:	3001      	adds	r0, #1
 800368c:	d0ab      	beq.n	80035e6 <_printf_i+0x166>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	079b      	lsls	r3, r3, #30
 8003692:	d413      	bmi.n	80036bc <_printf_i+0x23c>
 8003694:	68e0      	ldr	r0, [r4, #12]
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	4298      	cmp	r0, r3
 800369a:	bfb8      	it	lt
 800369c:	4618      	movlt	r0, r3
 800369e:	e7a4      	b.n	80035ea <_printf_i+0x16a>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4632      	mov	r2, r6
 80036a4:	4649      	mov	r1, r9
 80036a6:	4640      	mov	r0, r8
 80036a8:	47d0      	blx	sl
 80036aa:	3001      	adds	r0, #1
 80036ac:	d09b      	beq.n	80035e6 <_printf_i+0x166>
 80036ae:	3501      	adds	r5, #1
 80036b0:	68e3      	ldr	r3, [r4, #12]
 80036b2:	9903      	ldr	r1, [sp, #12]
 80036b4:	1a5b      	subs	r3, r3, r1
 80036b6:	42ab      	cmp	r3, r5
 80036b8:	dcf2      	bgt.n	80036a0 <_printf_i+0x220>
 80036ba:	e7eb      	b.n	8003694 <_printf_i+0x214>
 80036bc:	2500      	movs	r5, #0
 80036be:	f104 0619 	add.w	r6, r4, #25
 80036c2:	e7f5      	b.n	80036b0 <_printf_i+0x230>
 80036c4:	08003a35 	.word	0x08003a35
 80036c8:	08003a46 	.word	0x08003a46

080036cc <memchr>:
 80036cc:	4603      	mov	r3, r0
 80036ce:	b510      	push	{r4, lr}
 80036d0:	b2c9      	uxtb	r1, r1
 80036d2:	4402      	add	r2, r0
 80036d4:	4293      	cmp	r3, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	d101      	bne.n	80036de <memchr+0x12>
 80036da:	2000      	movs	r0, #0
 80036dc:	e003      	b.n	80036e6 <memchr+0x1a>
 80036de:	7804      	ldrb	r4, [r0, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	428c      	cmp	r4, r1
 80036e4:	d1f6      	bne.n	80036d4 <memchr+0x8>
 80036e6:	bd10      	pop	{r4, pc}

080036e8 <memcpy>:
 80036e8:	440a      	add	r2, r1
 80036ea:	4291      	cmp	r1, r2
 80036ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f0:	d100      	bne.n	80036f4 <memcpy+0xc>
 80036f2:	4770      	bx	lr
 80036f4:	b510      	push	{r4, lr}
 80036f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036fa:	4291      	cmp	r1, r2
 80036fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003700:	d1f9      	bne.n	80036f6 <memcpy+0xe>
 8003702:	bd10      	pop	{r4, pc}

08003704 <memmove>:
 8003704:	4288      	cmp	r0, r1
 8003706:	b510      	push	{r4, lr}
 8003708:	eb01 0402 	add.w	r4, r1, r2
 800370c:	d902      	bls.n	8003714 <memmove+0x10>
 800370e:	4284      	cmp	r4, r0
 8003710:	4623      	mov	r3, r4
 8003712:	d807      	bhi.n	8003724 <memmove+0x20>
 8003714:	1e43      	subs	r3, r0, #1
 8003716:	42a1      	cmp	r1, r4
 8003718:	d008      	beq.n	800372c <memmove+0x28>
 800371a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800371e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003722:	e7f8      	b.n	8003716 <memmove+0x12>
 8003724:	4601      	mov	r1, r0
 8003726:	4402      	add	r2, r0
 8003728:	428a      	cmp	r2, r1
 800372a:	d100      	bne.n	800372e <memmove+0x2a>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003736:	e7f7      	b.n	8003728 <memmove+0x24>

08003738 <_free_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4605      	mov	r5, r0
 800373c:	2900      	cmp	r1, #0
 800373e:	d043      	beq.n	80037c8 <_free_r+0x90>
 8003740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003744:	1f0c      	subs	r4, r1, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfb8      	it	lt
 800374a:	18e4      	addlt	r4, r4, r3
 800374c:	f000 f8d0 	bl	80038f0 <__malloc_lock>
 8003750:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <_free_r+0x94>)
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	4610      	mov	r0, r2
 8003756:	b933      	cbnz	r3, 8003766 <_free_r+0x2e>
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6014      	str	r4, [r2, #0]
 800375c:	4628      	mov	r0, r5
 800375e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003762:	f000 b8cb 	b.w	80038fc <__malloc_unlock>
 8003766:	42a3      	cmp	r3, r4
 8003768:	d90a      	bls.n	8003780 <_free_r+0x48>
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	1862      	adds	r2, r4, r1
 800376e:	4293      	cmp	r3, r2
 8003770:	bf01      	itttt	eq
 8003772:	681a      	ldreq	r2, [r3, #0]
 8003774:	685b      	ldreq	r3, [r3, #4]
 8003776:	1852      	addeq	r2, r2, r1
 8003778:	6022      	streq	r2, [r4, #0]
 800377a:	6063      	str	r3, [r4, #4]
 800377c:	6004      	str	r4, [r0, #0]
 800377e:	e7ed      	b.n	800375c <_free_r+0x24>
 8003780:	461a      	mov	r2, r3
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	b10b      	cbz	r3, 800378a <_free_r+0x52>
 8003786:	42a3      	cmp	r3, r4
 8003788:	d9fa      	bls.n	8003780 <_free_r+0x48>
 800378a:	6811      	ldr	r1, [r2, #0]
 800378c:	1850      	adds	r0, r2, r1
 800378e:	42a0      	cmp	r0, r4
 8003790:	d10b      	bne.n	80037aa <_free_r+0x72>
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	4401      	add	r1, r0
 8003796:	1850      	adds	r0, r2, r1
 8003798:	4283      	cmp	r3, r0
 800379a:	6011      	str	r1, [r2, #0]
 800379c:	d1de      	bne.n	800375c <_free_r+0x24>
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4401      	add	r1, r0
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	6053      	str	r3, [r2, #4]
 80037a8:	e7d8      	b.n	800375c <_free_r+0x24>
 80037aa:	d902      	bls.n	80037b2 <_free_r+0x7a>
 80037ac:	230c      	movs	r3, #12
 80037ae:	602b      	str	r3, [r5, #0]
 80037b0:	e7d4      	b.n	800375c <_free_r+0x24>
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	1821      	adds	r1, r4, r0
 80037b6:	428b      	cmp	r3, r1
 80037b8:	bf01      	itttt	eq
 80037ba:	6819      	ldreq	r1, [r3, #0]
 80037bc:	685b      	ldreq	r3, [r3, #4]
 80037be:	1809      	addeq	r1, r1, r0
 80037c0:	6021      	streq	r1, [r4, #0]
 80037c2:	6063      	str	r3, [r4, #4]
 80037c4:	6054      	str	r4, [r2, #4]
 80037c6:	e7c9      	b.n	800375c <_free_r+0x24>
 80037c8:	bd38      	pop	{r3, r4, r5, pc}
 80037ca:	bf00      	nop
 80037cc:	20000094 	.word	0x20000094

080037d0 <_malloc_r>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	1ccd      	adds	r5, r1, #3
 80037d4:	f025 0503 	bic.w	r5, r5, #3
 80037d8:	3508      	adds	r5, #8
 80037da:	2d0c      	cmp	r5, #12
 80037dc:	bf38      	it	cc
 80037de:	250c      	movcc	r5, #12
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	4606      	mov	r6, r0
 80037e4:	db01      	blt.n	80037ea <_malloc_r+0x1a>
 80037e6:	42a9      	cmp	r1, r5
 80037e8:	d903      	bls.n	80037f2 <_malloc_r+0x22>
 80037ea:	230c      	movs	r3, #12
 80037ec:	6033      	str	r3, [r6, #0]
 80037ee:	2000      	movs	r0, #0
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f2:	f000 f87d 	bl	80038f0 <__malloc_lock>
 80037f6:	4921      	ldr	r1, [pc, #132]	; (800387c <_malloc_r+0xac>)
 80037f8:	680a      	ldr	r2, [r1, #0]
 80037fa:	4614      	mov	r4, r2
 80037fc:	b99c      	cbnz	r4, 8003826 <_malloc_r+0x56>
 80037fe:	4f20      	ldr	r7, [pc, #128]	; (8003880 <_malloc_r+0xb0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b923      	cbnz	r3, 800380e <_malloc_r+0x3e>
 8003804:	4621      	mov	r1, r4
 8003806:	4630      	mov	r0, r6
 8003808:	f000 f862 	bl	80038d0 <_sbrk_r>
 800380c:	6038      	str	r0, [r7, #0]
 800380e:	4629      	mov	r1, r5
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f85d 	bl	80038d0 <_sbrk_r>
 8003816:	1c43      	adds	r3, r0, #1
 8003818:	d123      	bne.n	8003862 <_malloc_r+0x92>
 800381a:	230c      	movs	r3, #12
 800381c:	4630      	mov	r0, r6
 800381e:	6033      	str	r3, [r6, #0]
 8003820:	f000 f86c 	bl	80038fc <__malloc_unlock>
 8003824:	e7e3      	b.n	80037ee <_malloc_r+0x1e>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	1b5b      	subs	r3, r3, r5
 800382a:	d417      	bmi.n	800385c <_malloc_r+0x8c>
 800382c:	2b0b      	cmp	r3, #11
 800382e:	d903      	bls.n	8003838 <_malloc_r+0x68>
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	441c      	add	r4, r3
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	e004      	b.n	8003842 <_malloc_r+0x72>
 8003838:	6863      	ldr	r3, [r4, #4]
 800383a:	42a2      	cmp	r2, r4
 800383c:	bf0c      	ite	eq
 800383e:	600b      	streq	r3, [r1, #0]
 8003840:	6053      	strne	r3, [r2, #4]
 8003842:	4630      	mov	r0, r6
 8003844:	f000 f85a 	bl	80038fc <__malloc_unlock>
 8003848:	f104 000b 	add.w	r0, r4, #11
 800384c:	1d23      	adds	r3, r4, #4
 800384e:	f020 0007 	bic.w	r0, r0, #7
 8003852:	1ac2      	subs	r2, r0, r3
 8003854:	d0cc      	beq.n	80037f0 <_malloc_r+0x20>
 8003856:	1a1b      	subs	r3, r3, r0
 8003858:	50a3      	str	r3, [r4, r2]
 800385a:	e7c9      	b.n	80037f0 <_malloc_r+0x20>
 800385c:	4622      	mov	r2, r4
 800385e:	6864      	ldr	r4, [r4, #4]
 8003860:	e7cc      	b.n	80037fc <_malloc_r+0x2c>
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d0e3      	beq.n	8003834 <_malloc_r+0x64>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f82e 	bl	80038d0 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1dd      	bne.n	8003834 <_malloc_r+0x64>
 8003878:	e7cf      	b.n	800381a <_malloc_r+0x4a>
 800387a:	bf00      	nop
 800387c:	20000094 	.word	0x20000094
 8003880:	20000098 	.word	0x20000098

08003884 <_realloc_r>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	4607      	mov	r7, r0
 8003888:	4614      	mov	r4, r2
 800388a:	460e      	mov	r6, r1
 800388c:	b921      	cbnz	r1, 8003898 <_realloc_r+0x14>
 800388e:	4611      	mov	r1, r2
 8003890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003894:	f7ff bf9c 	b.w	80037d0 <_malloc_r>
 8003898:	b922      	cbnz	r2, 80038a4 <_realloc_r+0x20>
 800389a:	f7ff ff4d 	bl	8003738 <_free_r>
 800389e:	4625      	mov	r5, r4
 80038a0:	4628      	mov	r0, r5
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	f000 f830 	bl	8003908 <_malloc_usable_size_r>
 80038a8:	42a0      	cmp	r0, r4
 80038aa:	d20f      	bcs.n	80038cc <_realloc_r+0x48>
 80038ac:	4621      	mov	r1, r4
 80038ae:	4638      	mov	r0, r7
 80038b0:	f7ff ff8e 	bl	80037d0 <_malloc_r>
 80038b4:	4605      	mov	r5, r0
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d0f2      	beq.n	80038a0 <_realloc_r+0x1c>
 80038ba:	4631      	mov	r1, r6
 80038bc:	4622      	mov	r2, r4
 80038be:	f7ff ff13 	bl	80036e8 <memcpy>
 80038c2:	4631      	mov	r1, r6
 80038c4:	4638      	mov	r0, r7
 80038c6:	f7ff ff37 	bl	8003738 <_free_r>
 80038ca:	e7e9      	b.n	80038a0 <_realloc_r+0x1c>
 80038cc:	4635      	mov	r5, r6
 80038ce:	e7e7      	b.n	80038a0 <_realloc_r+0x1c>

080038d0 <_sbrk_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	2300      	movs	r3, #0
 80038d4:	4d05      	ldr	r5, [pc, #20]	; (80038ec <_sbrk_r+0x1c>)
 80038d6:	4604      	mov	r4, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	f7fc ffe2 	bl	80008a4 <_sbrk>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_sbrk_r+0x1a>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_sbrk_r+0x1a>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	2000016c 	.word	0x2000016c

080038f0 <__malloc_lock>:
 80038f0:	4801      	ldr	r0, [pc, #4]	; (80038f8 <__malloc_lock+0x8>)
 80038f2:	f000 b811 	b.w	8003918 <__retarget_lock_acquire_recursive>
 80038f6:	bf00      	nop
 80038f8:	20000174 	.word	0x20000174

080038fc <__malloc_unlock>:
 80038fc:	4801      	ldr	r0, [pc, #4]	; (8003904 <__malloc_unlock+0x8>)
 80038fe:	f000 b80c 	b.w	800391a <__retarget_lock_release_recursive>
 8003902:	bf00      	nop
 8003904:	20000174 	.word	0x20000174

08003908 <_malloc_usable_size_r>:
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f18      	subs	r0, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfbc      	itt	lt
 8003912:	580b      	ldrlt	r3, [r1, r0]
 8003914:	18c0      	addlt	r0, r0, r3
 8003916:	4770      	bx	lr

08003918 <__retarget_lock_acquire_recursive>:
 8003918:	4770      	bx	lr

0800391a <__retarget_lock_release_recursive>:
 800391a:	4770      	bx	lr

0800391c <_init>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr

08003928 <_fini>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr
